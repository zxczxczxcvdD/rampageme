import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, ChatJoinRequest
import json
import asyncio
from telethon import TelegramClient
from telethon.sessions import StringSession
import os
import threading
import time
import sqlite3
from datetime import datetime, timedelta
import random
from pyCryptoPayAPI import pyCryptoPayAPI
from db import add_user, set_captcha_passed, has_passed_captcha, add_subscription, get_subscription, remove_subscription, add_referral, get_referrals, get_free_requests, add_free_request, use_free_request, get_all_subscriptions, get_all_users, add_channel, remove_channel, get_channels, reset_all_captcha
import psycopg2
import traceback
from telebot.apihelper import ApiTelegramException
import xml.etree.ElementTree as ET
from xml.dom import minidom
import re

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8048206902:AAEmlK8ihhGGSZ3OxN2yeyfnvYntpZKDMVU"
    
# Telegram API credentials (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org)
API_ID = 27683579  # int, –Ω–µ —Å—Ç—Ä–æ–∫–∞
API_HASH = "a1d0fc7d0c9a41ff5e0ae6a6ed8e2dbb"  # –í–∞—à API_HASH

# Session string (—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)
def load_session_string():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç session string –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("session_string.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª session_string.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ create_session.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è session string")
        return None

SESSION_STRING = load_session_string()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
try:
    bot_info = bot.get_me()
    print(f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
    print(f"   ID: {bot_info.id}")
    print(f"   Username: @{bot_info.username}")
    print(f"   –ò–º—è: {bot_info.first_name}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")

# –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
telethon_client = None
telethon_loop = None

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_ID = "-1002560851236"  # ID –∫–∞–Ω–∞–ª–∞ '–ë–µ–ª—ã–π'
CHANNEL_LINK = "https://t.me/+WpK8oeax0iU2NTc0"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª '–ë–µ–ª—ã–π'
CHANNEL_NAME = "–ë–µ–ª—ã–π"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã
CRYPTO_TOKEN = "429741:AAXorUNHqEtXjRMwoOy4bha83bt4FioBrAt"
crypto = pyCryptoPayAPI(api_token=CRYPTO_TOKEN)

# –¶–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫
PRICES = {
    "7": 3,    # 7 –¥–Ω–µ–π - 3$
    "14": 5,   # 14 –¥–Ω–µ–π - 5$
    "30": 10,  # –º–µ—Å—è—Ü - 10$
    "365": 20, # –≥–æ–¥ - 20$
    "infinity": 33  # –Ω–∞–≤—Å–µ–≥–¥–∞ - 33$
}

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è—Ä–∫–∏–º–∏ —ç–º–æ–¥–∑–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üíö –ü–æ–∏—Å–∫", callback_data="start_search"),
        InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
        InlineKeyboardButton("üéÅ –†–µ—Ñ–µ—Ä–∞–ª", callback_data="referral"),
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="free_sub")
    )
    return keyboard

def create_search_method_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="search_phone"),
        InlineKeyboardButton("üë§ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="search_name"),
        InlineKeyboardButton("üñ§ –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return keyboard

def create_shop_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üíö 7 –¥–Ω–µ–π - 3$", callback_data="buy_7"),
        InlineKeyboardButton("üíö 14 –¥–Ω–µ–π - 5$", callback_data="buy_14"),
        InlineKeyboardButton("üíö –ú–µ—Å—è—Ü - 10$", callback_data="buy_30"),
        InlineKeyboardButton("üíö –ì–æ–¥ - 20$", callback_data="buy_365"),
        InlineKeyboardButton("üíö –ù–∞–≤—Å–µ–≥–¥–∞ - 33$", callback_data="buy_infinity"),
        InlineKeyboardButton("üñ§ –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return keyboard

def create_emoji_captcha_keyboard(correct_emoji, wrong_emojis):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞–ø—á–∏ —Å —ç–º–æ–¥–∑–∏"""
    emojis = wrong_emojis + [correct_emoji]
    random.shuffle(emojis)
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(emoji, callback_data=f"captcha_{emoji}") for emoji in emojis]
    keyboard.add(*buttons)
    return keyboard

def check_channel_subscription(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat_info = bot.get_chat(CHANNEL_ID)
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {chat_info.title}")
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        member = bot.get_chat_member(CHANNEL_ID, user_id)
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {member.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É)
        if "chat not found" in str(e) or "Bad Request" in str(e):
            print("üîç –û—Ç–ª–∞–¥–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return True
        return False

def can_use_bot(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if not check_channel_subscription(user_id):
        return False
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    return has_subscription(user_id) or has_free_request(user_id)

def get_referral_link(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"""
    return f"https://t.me/{(bot.get_me()).username}?start=ref{user_id}"

def run_telethon_loop():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç event loop –¥–ª—è Telethon –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global telethon_loop
    telethon_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(telethon_loop)
    telethon_loop.run_forever()

def init_telethon_client():
    global telethon_client, telethon_loop
    if not SESSION_STRING:
        return False
    thread = threading.Thread(target=run_telethon_loop, daemon=True)
    thread.start()
    time.sleep(1)
    if telethon_loop is None:
        return False
    future = asyncio.run_coroutine_threadsafe(create_telethon_client(), telethon_loop)
    telethon_client = future.result()
    return telethon_client is not None

async def create_telethon_client():
    if not SESSION_STRING:
        return None
    client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
    await client.connect()
    if not await client.is_user_authorized():
        return None
    return client

def search_phone_number_sync(phone_number):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not telethon_client or not telethon_loop:
        return "‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    try:
        future = asyncio.run_coroutine_threadsafe(search_phone_number(phone_number), telethon_loop)
        return future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

def search_by_name_sync(name):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
    if not telethon_client or not telethon_loop:
        return "‚ùå Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    
    try:
        future = asyncio.run_coroutine_threadsafe(search_by_name(name), telethon_loop)
        return future.result(timeout=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

async def search_phone_number(phone_number):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ @Userrsboxx_bot"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ @Userrsboxx_bot
        bot_entity = await telethon_client.get_entity("@Userrsboxx_bot")
        
        # –û—á–∏—â–∞–µ–º —á–∞—Ç —Å –±–æ—Ç–æ–º –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        print("üßπ –û—á–∏—â–∞–µ–º —á–∞—Ç —Å @Userrsboxx_bot...")
        await telethon_client.delete_dialog(bot_entity)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await telethon_client.send_message(bot_entity, phone_number)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        messages = []
        async for message in telethon_client.iter_messages(bot_entity, limit=3):
            if message.text and message.text != phone_number:
                messages.append(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if messages:
            result = messages[1] if len(messages) >= 2 else messages[0]
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫—Ä—ã—Ç—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if "üõ°Ô∏è" in result and "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–º–µ—Ä–∞ —Å–∫—Ä—ã–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ" in result:
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return result
        
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

async def search_by_name(name):
    """–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ @Probiv_Probitdri_Bot"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞ @Probiv_Probitdri_Bot
        bot_entity = await telethon_client.get_entity("@Probiv_Probitdri_Bot")
        
        # –û—á–∏—â–∞–µ–º —á–∞—Ç —Å –±–æ—Ç–æ–º –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        print("üßπ –û—á–∏—â–∞–µ–º —á–∞—Ç —Å @Probiv_Probitdri_Bot...")
        await telethon_client.delete_dialog(bot_entity)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        await asyncio.sleep(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        await telethon_client.send_message(bot_entity, name)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
        messages = []
        async for message in telethon_client.iter_messages(bot_entity, limit=3):
            if message.text and message.text != name:
                messages.append(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if messages:
            result = messages[1] if len(messages) >= 2 else messages[0]
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫—Ä—ã—Ç—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if "üõ°Ô∏è" in result and "–í–ª–∞–¥–µ–ª–µ—Ü —Å–∫—Ä—ã–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ" in result:
                print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return result
        
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

def generate_xml_report(search_type, query, result, user_id, username):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π XML —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        root = ET.Element("SearchReport")
        root.set("version", "1.0")
        root.set("generated", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        root.set("bot", "Maniac Info Bot")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
        metadata = ET.SubElement(root, "Metadata")
        ET.SubElement(metadata, "SearchType").text = search_type
        ET.SubElement(metadata, "Query").text = query
        ET.SubElement(metadata, "UserID").text = str(user_id)
        ET.SubElement(metadata, "Username").text = username or "Unknown"
        ET.SubElement(metadata, "Timestamp").text = datetime.now().isoformat()
        ET.SubElement(metadata, "BotVersion").text = "1.0"
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = ET.SubElement(root, "Results")
        
        if result and result != "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" and "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞" not in result:
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
            clean_result = result.replace('<b>', '').replace('</b>', '')
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–∞—Ä—Å–∏–º –µ–≥–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º
            result_text = ET.SubElement(results, "Result")
            result_text.set("status", "found")
            result_text.text = clean_result
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info_section = ET.SubElement(results, "StructuredInfo")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–µ–∫—Ü–∏—è–º
            sections = clean_result.split('üë≥‚Äç')
            if len(sections) > 1:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–æ –ª–∏—Ü)
                main_info = sections[0]
                parse_main_info(info_section, main_info)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Ü–∞—Ö –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ
                if len(sections) > 1:
                    remaining_info = 'üë≥‚Äç' + sections[1]
                    parse_detailed_info(info_section, remaining_info)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –ø–∞—Ä—Å–∏–º –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å
                parse_main_info(info_section, clean_result)
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            no_result = ET.SubElement(results, "Result")
            no_result.set("status", "not_found")
            no_result.text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = ET.SubElement(root, "BotInfo")
        ET.SubElement(bot_info, "Name").text = "Maniac Info Bot"
        ET.SubElement(bot_info, "Description").text = "–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º–µ–Ω–∏"
        ET.SubElement(bot_info, "GeneratedAt").text = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π XML
        rough_string = ET.tostring(root, 'unicode')
        reparsed = minidom.parseString(rough_string)
        pretty_xml = reparsed.toprettyxml(indent="  ")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"search_report_{search_type}_{timestamp}.xml"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(pretty_xml)
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML: {e}")
        return None

def parse_main_info(info_section, text):
    """–ü–∞—Ä—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, —Å—Ç—Ä–∞–Ω–∞, —Ä–µ–≥–∏–æ–Ω, –æ–ø–µ—Ä–∞—Ç–æ—Ä)"""
    lines = text.split('\n')
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        if '‚îú‚îÄ–¢–µ–ª–µ—Ñ–æ–Ω:' in line:
            phone = line.split('‚îú‚îÄ–¢–µ–ª–µ—Ñ–æ–Ω:')[1].strip()
            ET.SubElement(info_section, "Phone").text = phone
        elif '‚îú‚îÄ–°—Ç—Ä–∞–Ω–∞:' in line:
            country = line.split('‚îú‚îÄ–°—Ç—Ä–∞–Ω–∞:')[1].strip()
            ET.SubElement(info_section, "Country").text = country
        elif '‚îú‚îÄ–†–µ–≥–∏–æ–Ω:' in line:
            region = line.split('‚îú‚îÄ–†–µ–≥–∏–æ–Ω:')[1].strip()
            ET.SubElement(info_section, "Region").text = region
        elif '‚îî‚îÄ–û–ø–µ—Ä–∞—Ç–æ—Ä:' in line:
            operator = line.split('‚îî‚îÄ–û–ø–µ—Ä–∞—Ç–æ—Ä:')[1].strip()
            ET.SubElement(info_section, "Operator").text = operator

def parse_detailed_info(info_section, text):
    """–ü–∞—Ä—Å–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ª–∏—Ü–∞, –¥–∞—Ç—ã, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –ø–æ—á—Ç—ã, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, –ò–ù–ù)"""
    sections = text.split('üéâ')
    
    # –ü–∞—Ä—Å–∏–º –ª–∏—Ü–∞
    if 'üë≥‚Äç –õ–∏—Ü–∞:' in sections[0]:
        faces_section = sections[0].split('üë≥‚Äç –õ–∏—Ü–∞:')[1]
        faces = extract_list_items(faces_section)
        for face in faces:
            if face.strip():
                ET.SubElement(info_section, "Person").text = face.strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if len(sections) > 1:
        dates_section = sections[1]
        dates = extract_list_items(dates_section)
        for date in dates:
            if date.strip():
                ET.SubElement(info_section, "BirthDate").text = date.strip()
    
    # –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    if 'üöò –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:' in text:
        cars_section = text.split('üöò –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:')[1].split('üìß')[0]
        cars = extract_list_items(cars_section)
        for car in cars:
            if car.strip():
                ET.SubElement(info_section, "Car").text = car.strip()
    
    # –ü–∞—Ä—Å–∏–º –ø–æ—á—Ç—ã
    if 'üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:' in text:
        emails_section = text.split('üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:')[1].split('üì±')[0]
        emails = extract_list_items(emails_section)
        for email in emails:
            if email.strip() and '@' in email:
                ET.SubElement(info_section, "Email").text = email.strip()
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    if 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã:' in text:
        phones_section = text.split('üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã:')[1].split('üèõ')[0]
        phones = extract_list_items(phones_section)
        for phone in phones:
            if phone.strip() and ('+' in phone or phone.isdigit()):
                ET.SubElement(info_section, "AdditionalPhone").text = phone.strip()
    
    # –ü–∞—Ä—Å–∏–º –ò–ù–ù
    if 'üèõ –ò–ù–ù:' in text:
        inn_section = text.split('üèõ –ò–ù–ù:')[1]
        inns = extract_list_items(inn_section)
        for inn in inns:
            if inn.strip() and inn.strip().isdigit():
                ET.SubElement(info_section, "INN").text = inn.strip()

def extract_list_items(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    items = []
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replace('‚îî', '').replace('`', '').replace('__ –∏ –µ—â–µ', '').replace('__', '')
    text = text.replace('‚îú‚îÄ', '').replace('‚îú', '').replace('‚îÄ', '')
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º
    parts = text.split(',')
    for part in parts:
        part = part.strip()
        if part and len(part) > 2:
            items.append(part)
    
    return items

def generate_html_report(search_type, query, result, user_id, username):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –æ—Ç—á–µ—Ç"""
    try:
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        clean_result = clean_result_for_telegram(result)
        parsed_data = parse_result_for_html(clean_result)
        
        # –°–æ–∑–¥–∞–µ–º HTML –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maniac Info Report</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        :root {{
            --primary-color: #00d4ff;
            --secondary-color: #ff0080;
            --bg-gradient: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
            --card-bg: rgba(255, 255, 255, 0.03);
            --text-color: #ffffff;
            --border-color: rgba(255, 255, 255, 0.1);
        }}
        
        [data-theme="light"] {{
            --primary-color: #2563eb;
            --secondary-color: #dc2626;
            --bg-gradient: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 25%, #cbd5e1 50%, #94a3b8 75%, #64748b 100%);
            --card-bg: rgba(0, 0, 0, 0.05);
            --text-color: #1e293b;
            --border-color: rgba(0, 0, 0, 0.1);
        }}
        
        [data-theme="light"] .info-card {{
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.08) 0%, rgba(0, 0, 0, 0.03) 100%);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }}
        
        [data-theme="light"] .info-card h3 {{
            color: #2563eb !important;
        }}
        
        [data-theme="light"] .info-card p {{
            color: #1e293b !important;
            text-shadow: none;
        }}
        
        [data-theme="light"] .section-title {{
            color: #2563eb;
        }}
        
        [data-theme="light"] .logo {{
            background: linear-gradient(135deg, #2563eb 0%, #dc2626 30%, #ea580c 60%, #2563eb 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }}
        
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-gradient);
            color: var(--text-color);
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
            transition: all 0.3s ease;
        }}
        
        body::before {{
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 60% 60%, rgba(255, 107, 53, 0.2) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
            animation: backgroundShift 10s ease-in-out infinite;
        }}
        
        @keyframes backgroundShift {{
            0%, 100% {{ opacity: 1; }}
            50% {{ opacity: 0.8; }}
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 40px 20px;
            position: relative;
        }}
        
        .main-content {{
            background: var(--card-bg);
            border-radius: 30px;
            padding: 40px;
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.5),
                inset 0 1px 0 var(--border-color);
            backdrop-filter: blur(20px);
            border: 1px solid var(--border-color);
            position: relative;
            overflow: hidden;
            margin: 0;
        }}
        
        .main-content::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, var(--primary-color), var(--secondary-color), var(--primary-color), transparent);
            animation: borderFlow 3s linear infinite;
        }}
        
        @keyframes borderFlow {{
            0% {{ transform: translateX(-100%); }}
            100% {{ transform: translateX(100%); }}
        }}
        
        .header {{
            text-align: center;
            margin-bottom: 50px;
            position: relative;
        }}
        
        .header::after {{
            content: '';
            position: absolute;
            bottom: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background: linear-gradient(90deg, #00d4ff, #ff0080, #00d4ff);
            border-radius: 2px;
        }}
        
        .logo {{
            font-size: 4em;
            font-weight: 900;
            margin-bottom: 15px;
            background: linear-gradient(135deg, #00d4ff 0%, #ff0080 30%, #ff6b35 60%, #00d4ff 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: textGlow 2s ease-in-out infinite alternate;
            text-shadow: 0 0 30px rgba(0, 212, 255, 0.5);
            letter-spacing: 2px;
        }}
        
        @keyframes textGlow {{
            from {{ 
                filter: drop-shadow(0 0 20px rgba(0, 212, 255, 0.5));
                text-shadow: 0 0 30px rgba(0, 212, 255, 0.5);
            }}
            to {{ 
                filter: drop-shadow(0 0 30px rgba(255, 0, 128, 0.5));
                text-shadow: 0 0 40px rgba(255, 0, 128, 0.5);
            }}
        }}
        
        .search-info {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 50px;
        }}
        
        .info-card {{
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
        }}
        
        .info-card::before {{
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.6s ease;
        }}
        
        .info-card:hover::before {{
            left: 100%;
        }}
        
        .info-card:hover {{
            transform: translateY(-15px) scale(1.05) rotate(2deg);
            box-shadow: 
                0 35px 70px rgba(0, 0, 0, 0.6),
                0 0 0 3px rgba(0, 212, 255, 0.6),
                0 0 40px rgba(0, 212, 255, 0.3),
                0 0 80px rgba(255, 0, 128, 0.2);
            border-color: rgba(0, 212, 255, 0.7);
            filter: brightness(1.2) contrast(1.2) saturate(1.1);
        }}
        
        .info-card::after {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.05) 50%, transparent 70%);
            opacity: 0;
            transition: opacity 0.4s ease;
            pointer-events: none;
        }}
        
        .info-card:hover::after {{
            opacity: 1;
        }}
        
        .info-card h3 {{
            margin: 0 0 15px 0;
            font-size: 1.3em;
            color: #00d4ff;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }}
        
        .info-card h3::before {{
            content: '';
            width: 4px;
            height: 20px;
            background: linear-gradient(180deg, #00d4ff, #ff0080);
            border-radius: 2px;
        }}
        
        .info-card p {{
            margin: 0;
            font-size: 1.1em;
            color: #ffffff !important;
            font-weight: 400;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
        }}
        
        .result-section {{
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.03) 100%);
            border-radius: 30px;
            padding: 50px;
            border: 2px solid rgba(255, 255, 255, 0.15);
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(20px);
            margin: 0;
            box-shadow: 
                0 25px 50px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }}
        
        .result-section::after {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #00d4ff, #ff0080, #00d4ff);
            animation: borderPulse 2s ease-in-out infinite;
        }}
        
        @keyframes borderPulse {{
            0%, 100% {{ opacity: 1; transform: scaleX(1); }}
            50% {{ opacity: 0.7; transform: scaleX(0.95); }}
        }}
        
        .section-title {{
            font-size: 2.2em;
            color: #00d4ff;
            text-align: center;
            font-weight: 600;
            position: relative;
            margin: 0 0 25px 0;
            padding: 0;
        }}
        
        .section-title::after {{
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 2px;
            background: linear-gradient(90deg, #00d4ff, #ff0080);
            border-radius: 1px;
        }}
        
        .status-container {{
            display: flex;
            align-items: center;
            gap: 20px;
            margin: 0 0 30px 0;
            padding: 0;
        }}
        
        .status-badge {{
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        }}
        
        .status-found {{
            background: linear-gradient(135deg, #00d4ff 0%, #ff0080 30%, #ff6b35 60%, #00d4ff 100%);
            color: white;
            box-shadow: 
                0 12px 35px rgba(0, 212, 255, 0.5),
                0 0 0 2px rgba(0, 212, 255, 0.3),
                0 0 20px rgba(255, 0, 128, 0.3);
            animation: statusPulse 2s ease-in-out infinite;
            font-weight: 700;
            letter-spacing: 1px;
        }}
        
        @keyframes statusPulse {{
            0%, 100% {{ 
                transform: scale(1);
                box-shadow: 0 12px 35px rgba(0, 212, 255, 0.5);
            }}
            50% {{ 
                transform: scale(1.08);
                box-shadow: 0 20px 50px rgba(0, 212, 255, 0.7);
            }}
        }}
        
        .status-icon {{
            font-size: 1.1em;
            animation: iconBounce 1s ease-in-out infinite;
        }}
        
        @keyframes iconBounce {{
            0%, 100% {{ transform: translateY(0); }}
            50% {{ transform: translateY(-3px); }}
        }}
        

        
        .data-item {{
            background: rgba(0, 0, 0, 0.4);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
            font-size: 1.1em;
            line-height: 1.7;
            color: #ffffff;
            white-space: pre-wrap;
            overflow-x: auto;
            position: relative;
            backdrop-filter: blur(10px);
            margin: 0;
            padding: 0;
        }}
        
        .data-item::before {{
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 1px;
            background: linear-gradient(90deg, transparent, #00d4ff, transparent);
        }}
        
        .phone-number {{
            font-size: 1.5em;
            font-weight: bold;
            color: #00d4ff;
            text-align: center;
            margin-bottom: 30px;
            text-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
        }}
        
        .person-item {{
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
        }}
        
        .person-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }}
        
        .email-item {{
            background: linear-gradient(135deg, #f093fb, #f5576c);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(240, 147, 251, 0.3);
            transition: all 0.3s ease;
        }}
        
        .email-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(240, 147, 251, 0.4);
        }}
        
        .car-item {{
            background: linear-gradient(135deg, #4facfe, #00f2fe);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.3);
            transition: all 0.3s ease;
        }}
        
        .car-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);
        }}
        
        .inn-item {{
            background: linear-gradient(135deg, #43e97b, #38f9d7);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(67, 233, 123, 0.3);
            transition: all 0.3s ease;
        }}
        
        .inn-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(67, 233, 123, 0.4);
        }}
        
        .date-item {{
            background: linear-gradient(135deg, #fa709a, #fee140);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(250, 112, 154, 0.3);
            transition: all 0.3s ease;
        }}
        
        .date-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(250, 112, 154, 0.4);
        }}
        
        .database-item {{
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
            color: white;
            padding: 15px 20px;
            border-radius: 12px;
            margin-bottom: 10px;
            font-weight: 500;
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.3);
            transition: all 0.3s ease;
        }}
        
        .database-item:hover {{
            transform: translateX(5px);
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
        }}
        
        .footer {{
            text-align: center;
            margin-top: 50px;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.95em;
            font-weight: 300;
        }}
        
        .theme-toggle {{
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }}
        
        .theme-btn {{
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 25px;
            padding: 12px 20px;
            color: var(--text-color);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            display: flex;
            align-items: center;
            gap: 8px;
        }}
        
        .theme-btn:hover {{
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            border-color: var(--primary-color);
        }}
        
        .theme-icon {{
            font-size: 16px;
            transition: transform 0.3s ease;
        }}
        
        .theme-btn:hover .theme-icon {{
            transform: rotate(180deg);
        }}
        
        ::-webkit-scrollbar {{
            width: 12px;
        }}
        
        ::-webkit-scrollbar-track {{
            background: var(--card-bg);
            border-radius: 6px;
            margin: 4px;
        }}
        
        ::-webkit-scrollbar-thumb {{
            background: linear-gradient(180deg, var(--primary-color), var(--secondary-color));
            border-radius: 6px;
            border: 2px solid var(--card-bg);
            transition: all 0.3s ease;
        }}
        
        ::-webkit-scrollbar-thumb:hover {{
            background: linear-gradient(180deg, var(--secondary-color), var(--primary-color));
            transform: scale(1.1);
        }}
        
        ::-webkit-scrollbar-corner {{
            background: transparent;
        }}
        
        .glow-effect {{
            position: relative;
        }}
        
        .glow-effect::after {{
            content: '';
            position: absolute;
            top: -3px;
            left: -3px;
            right: -3px;
            bottom: -3px;
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color), var(--primary-color));
            border-radius: inherit;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.4s ease;
            animation: glowPulse 2s ease-in-out infinite;
        }}
        
        .glow-effect:hover::after {{
            opacity: 0.4;
        }}
        
        @keyframes glowPulse {{
            0%, 100% {{ opacity: 0; }}
            50% {{ opacity: 0.2; }}
        }}
        
        .code-particles {{
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
            overflow: hidden;
        }}
        
        .code-particle {{
            position: absolute;
            color: var(--primary-color);
            font-family: 'Courier New', monospace;
            font-size: 14px;
            opacity: 0.8;
            animation: codeFall 8s linear infinite;
            text-shadow: 0 0 12px var(--primary-color);
            font-weight: bold;
            filter: blur(0.5px);
        }}
        
        @keyframes codeFall {{
            0% {{
                transform: translateY(-100px) rotate(0deg);
                opacity: 0;
            }}
            10% {{
                opacity: 0.8;
            }}
            90% {{
                opacity: 0.8;
            }}
            100% {{
                transform: translateY(100vh) rotate(360deg);
                opacity: 0;
            }}
        }}
        
        .smooth-transition {{
            transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }}
        

        
        @keyframes slideInLeft {{
            from {{
                opacity: 0;
                transform: translateX(-30px);
            }}
            to {{
                opacity: 1;
                transform: translateX(0);
            }}
        }}
        
        @keyframes fadeInUp {{
            from {{
                opacity: 0;
                transform: translateY(40px) scale(0.95);
            }}
            to {{
                opacity: 1;
                transform: translateY(0) scale(1);
            }}
        }}
        

        
        @media (max-width: 768px) {{
            .container {{
                padding: 10px 5px;
            }}
            
            .main-content {{
                padding: 20px 12px;
                animation: none;
                border-radius: 25px;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%);
                backdrop-filter: blur(25px);
                border: 2px solid rgba(0, 212, 255, 0.3);
                box-shadow: 
                    0 20px 40px rgba(0, 0, 0, 0.6),
                    0 0 0 1px rgba(0, 212, 255, 0.2),
                    0 0 30px rgba(0, 212, 255, 0.1);
            }}
            
            .logo {{
                font-size: 2.5em;
                letter-spacing: 2px;
                margin-bottom: 15px;
                text-shadow: 0 0 20px rgba(0, 212, 255, 0.8);
                animation: mobileLogoGlow 2s ease-in-out infinite alternate;
            }}
            
            @keyframes mobileLogoGlow {{
                from {{ filter: drop-shadow(0 0 15px rgba(0, 212, 255, 0.6)); }}
                to {{ filter: drop-shadow(0 0 25px rgba(255, 0, 128, 0.8)); }}
            }}
            
            .search-info {{
                grid-template-columns: 1fr;
                gap: 20px;
            }}
            
            .info-card {{
                padding: 25px;
                transition: none;
                transform: none !important;
                color: #ffffff !important;
                background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(255, 0, 128, 0.05) 100%);
                border: 1px solid rgba(0, 212, 255, 0.3);
                border-radius: 20px;
                box-shadow: 
                    0 15px 30px rgba(0, 0, 0, 0.4),
                    0 0 0 1px rgba(0, 212, 255, 0.2),
                    0 0 20px rgba(0, 212, 255, 0.1);
                position: relative;
                overflow: hidden;
            }}
            
            .info-card::before {{
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, #00d4ff, #ff0080, #00d4ff);
                animation: borderFlow 3s linear infinite;
            }}
            
            .info-card h3 {{
                color: #00d4ff !important;
                font-size: 1.3em;
                margin-bottom: 15px;
                font-weight: 700;
                text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
            }}
            
            .info-card p {{
                color: #ffffff !important;
                font-size: 1.1em;
                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.7);
                font-weight: 500;
                line-height: 1.4;
            }}
            
            .result-section {{
                padding: 35px 20px;
                border-radius: 25px;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.3) 0%, rgba(0, 0, 0, 0.1) 100%);
                border: 2px solid rgba(0, 212, 255, 0.2);
                box-shadow: 
                    0 20px 40px rgba(0, 0, 0, 0.5),
                    0 0 0 1px rgba(0, 212, 255, 0.1);
            }}
            
            .section-title {{
                font-size: 2em;
                text-shadow: 0 0 15px rgba(0, 212, 255, 0.6);
            }}
            
            .status-badge {{
                padding: 8px 16px;
                font-size: 0.9em;
                border-radius: 25px;
                background: linear-gradient(135deg, #00d4ff 0%, #ff0080 100%);
                box-shadow: 0 8px 20px rgba(0, 212, 255, 0.4);
            }}
            
            .data-item {{
                font-size: 1em;
                padding: 18px;
                border-radius: 18px;
                background: linear-gradient(135deg, rgba(0, 212, 255, 0.1) 0%, rgba(255, 0, 128, 0.05) 100%);
                border: 1px solid rgba(0, 212, 255, 0.2);
                margin-bottom: 12px;
            }}
            
            .raw-result {{
                padding: 20px !important;
                font-size: 0.9em !important;
                line-height: 1.6 !important;
                background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.2) 100%);
                border-radius: 15px;
                border: 1px solid rgba(0, 212, 255, 0.2);
            }}
            
            .footer {{
                margin-top: 40px;
                font-size: 0.9em;
                text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
            }}
            
            /* –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–µ–º—ã */
            .theme-toggle {{
                display: none !important;
            }}
            
            .header {{
                padding-right: 0;
            }}
            
            /* –û—Ç–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
            .code-particles {{
                display: none;
            }}
            
            .glow-effect::after {{
                display: none;
            }}
            
            .info-card::before {{
                display: none;
            }}
            
            .info-card::after {{
                display: none;
            }}
            
            .main-content::before {{
                display: none;
            }}
            
            .result-section::after {{
                display: none;
            }}
            
            .header::after {{
                display: none;
            }}
            
            .section-title::after {{
                display: none;
            }}
        }}
        
        /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
        @media (max-width: 480px) {{
            .container {{
                padding: 8px 3px;
            }}
            
            .main-content {{
                padding: 15px 10px;
                border-radius: 20px;
            }}
            
            .logo {{
                font-size: 2em;
                letter-spacing: 1px;
            }}
            
            .info-card {{
                padding: 20px;
                color: #ffffff !important;
                border-radius: 18px;
            }}
            
            .info-card h3 {{
                color: #00d4ff !important;
                font-size: 1.2em;
                margin-bottom: 12px;
            }}
            
            .info-card p {{
                color: #ffffff !important;
                font-size: 1em;
                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.7);
            }}
            
            .result-section {{
                padding: 25px 15px;
                border-radius: 20px;
            }}
            
            .section-title {{
                font-size: 1.8em;
            }}
            
            .data-item {{
                font-size: 0.9em;
                padding: 15px;
                border-radius: 15px;
            }}
            
            .raw-result {{
                padding: 15px !important;
                font-size: 0.85em !important;
                word-wrap: break-word;
                overflow-wrap: break-word;
            }}
            
            .status-badge {{
                padding: 6px 12px;
                font-size: 0.8em;
            }}
            
            /* –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–µ–º—ã */
            .theme-toggle {{
                display: none !important;
            }}
        }}
        }}
    </style>
</head>
<body>
    <div class="code-particles" id="codeParticles"></div>
    <div class="container">
        <div class="main-content smooth-transition">

            <div class="header">
                <div class="logo">üîç Maniac Info Report</div>
                <p>–û—Ç—á–µ—Ç –æ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</p>
            </div>
            
            <div class="search-info">
                <div class="info-card" style="--animation-order: 0;">
                    <h3>–¢–∏–ø –ø–æ–∏—Å–∫–∞</h3>
                    <p>{search_type.title()}</p>
                </div>
                <div class="info-card" style="--animation-order: 1;">
                    <h3>–ó–∞–ø—Ä–æ—Å</h3>
                    <p>{query}</p>
                </div>
                <div class="info-card" style="--animation-order: 2;">
                    <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</h3>
                    <p>{username or 'Unknown'}</p>
                </div>
                <div class="info-card" style="--animation-order: 3;">
                    <h3>–î–∞—Ç–∞</h3>
                    <p>{datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
                </div>
            </div>
            <div class="result-section">
                <h2 class="section-title">üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞</h2>
                <div class="status-container">
                    <div class="status-badge status-found">
                        <span class="status-icon">‚úÖ</span>
                        <span class="status-text">–ù–∞–π–¥–µ–Ω–æ</span>
                    </div>
                </div>
                <div id="reportData" class="data-item" style="margin: 0; padding: 0;">
                    {generate_html_sections(parsed_data, result)}
                </div>
            </div>
            <div class="footer">
                <p>üìÑ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º Maniac Info</p>
                <p>üïê {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
            </div>
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
        function isMobile() {{
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
        }}
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–¥–∞—é—â–∏–µ —á–∞—Å—Ç–∏—á–∫–∏ –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        function createCodeParticles() {{
            if (isMobile()) {{
                return; // –ù–µ —Å–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            }}
            
            const particlesContainer = document.getElementById('codeParticles');
            const codeSymbols = ['{', '}', '[', ']', '<', '>', '/', '*', '+', '-', '=', ';', ':', '|', '&', '^', '%', '$', '#', '@', '!', '?', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
            const particleCount = 80;
            
            for (let i = 0; i < particleCount; i++) {{
                const particle = document.createElement('div');
                particle.className = 'code-particle';
                particle.textContent = codeSymbols[Math.floor(Math.random() * codeSymbols.length)];
                particle.style.left = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 10 + 's';
                particle.style.animationDuration = (Math.random() * 6 + 8) + 's';
                particle.style.fontSize = (Math.random() * 8 + 10) + 'px';
                particlesContainer.appendChild(particle);
            }}
        }}
        
        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—á–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        createCodeParticles();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        document.documentElement.setAttribute('data-theme', 'dark');
        

        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        if (!isMobile()) {{
            const observerOptions = {{
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            }};
            
            const observer = new IntersectionObserver((entries) => {{
                entries.forEach(entry => {{
                    if (entry.isIntersecting) {{
                        entry.target.style.animation = 'fadeInUp 0.6s ease-out';
                    }}
                }});
            }}, observerOptions);
            
            document.querySelectorAll('.result-section').forEach(section => {{
                observer.observe(section);
            }});
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            setTimeout(() => {{
                document.querySelectorAll('.data-item').forEach((item, index) => {{
                    setTimeout(() => {{
                        item.style.animation = 'slideInLeft 0.5s ease-out';
                    }}, index * 100);
                }});
            }}, 500);
        }}
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
        if (!isMobile()) {{
            document.querySelectorAll('.info-card').forEach(card => {{
                card.classList.add('glow-effect');
            }});
        }}
        

    </script>
</body>
</html>"""
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"search_report_{search_type}_{timestamp}.html"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {e}")
        return None

def parse_result_for_html(result):
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è HTML –æ—Ç—á–µ—Ç–∞"""
    data = {
        'phone': '',
        'country': '',
        'region': '',
        'operator': '',
        'persons': [],
        'emails': [],
        'phones': [],
        'cars': [],
        'inns': [],
        'birth_dates': [],
        'databases': []
    }
    
    if not result:
        return data
    
    # print(f"[DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result[:200]}...")
    
    # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    lines = result.split('\n')
    for line in lines:
        line = line.strip()
        if '‚îú‚îÄ**–¢–µ–ª–µ—Ñ–æ–Ω**:' in line:
            data['phone'] = line.split('‚îú‚îÄ**–¢–µ–ª–µ—Ñ–æ–Ω**:')[1].strip()
        elif '‚îú‚îÄ**–°—Ç—Ä–∞–Ω–∞**:' in line:
            data['country'] = line.split('‚îú‚îÄ**–°—Ç—Ä–∞–Ω–∞**:')[1].strip()
        elif '‚îú‚îÄ**–†–µ–≥–∏–æ–Ω**:' in line:
            data['region'] = line.split('‚îú‚îÄ**–†–µ–≥–∏–æ–Ω**:')[1].strip()
        elif '‚îî‚îÄ**–û–ø–µ—Ä–∞—Ç–æ—Ä**:' in line:
            data['operator'] = line.split('‚îî‚îÄ**–û–ø–µ—Ä–∞—Ç–æ—Ä**:')[1].strip()
    
    # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    result_text = result
    
    # –õ–∏—Ü–∞
    if '**üë≥‚Äç‚ôÇÔ∏è  –õ–∏—Ü–∞:**' in result_text:
        faces_section = result_text.split('**üë≥‚Äç‚ôÇÔ∏è  –õ–∏—Ü–∞:**')[1]
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if '**üéâ  –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**' in faces_section:
            faces_section = faces_section.split('**üéâ  –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**')[0]
        elif '**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**' in faces_section:
            faces_section = faces_section.split('**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**')[0]
        elif '**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**' in faces_section:
            faces_section = faces_section.split('**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**')[0]
        elif '**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**' in faces_section:
            faces_section = faces_section.split('**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**')[0]
        elif '**üèõÔ∏è  –ò–ù–ù:**' in faces_section:
            faces_section = faces_section.split('**üèõÔ∏è  –ò–ù–ù:**')[0]
        data['persons'] = extract_list_items(faces_section)
    
    # –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if '**üéâ  –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**' in result_text:
        dates_section = result_text.split('**üéâ  –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**')[1]
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if '**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**' in dates_section:
            dates_section = dates_section.split('**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**')[0]
        elif '**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**' in dates_section:
            dates_section = dates_section.split('**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**')[0]
        elif '**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**' in dates_section:
            dates_section = dates_section.split('**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**')[0]
        elif '**üèõÔ∏è  –ò–ù–ù:**' in dates_section:
            dates_section = dates_section.split('**üèõÔ∏è  –ò–ù–ù:**')[0]
        data['birth_dates'] = extract_list_items(dates_section)
    
    # –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
    if '**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**' in result_text:
        cars_section = result_text.split('**üöò  –ê–≤—Ç–æ–º–æ–±–∏–ª–∏:**')[1]
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if '**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**' in cars_section:
            cars_section = cars_section.split('**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**')[0]
        elif '**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**' in cars_section:
            cars_section = cars_section.split('**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**')[0]
        elif '**üèõÔ∏è  –ò–ù–ù:**' in cars_section:
            cars_section = cars_section.split('**üèõÔ∏è  –ò–ù–ù:**')[0]
        data['cars'] = extract_list_items(cars_section)
    
    # –ü–æ—á—Ç—ã
    if '**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**' in result_text:
        emails_section = result_text.split('**üìß  –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:**')[1]
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if '**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**' in emails_section:
            emails_section = emails_section.split('**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**')[0]
        elif '**üèõÔ∏è  –ò–ù–ù:**' in emails_section:
            emails_section = emails_section.split('**üèõÔ∏è  –ò–ù–ù:**')[0]
        data['emails'] = extract_list_items(emails_section)
    
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã
    if '**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**' in result_text:
        phones_section = result_text.split('**üì±  –¢–µ–ª–µ—Ñ–æ–Ω—ã:**')[1]
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if '**üèõÔ∏è  –ò–ù–ù:**' in phones_section:
            phones_section = phones_section.split('**üèõÔ∏è  –ò–ù–ù:**')[0]
        data['phones'] = extract_list_items(phones_section)
    
    # –ò–ù–ù
    if '**üèõÔ∏è  –ò–ù–ù:**' in result_text:
        inn_section = result_text.split('**üèõÔ∏è  –ò–ù–ù:**')[1]
        data['inns'] = extract_list_items(inn_section)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data['databases'] = detect_database_sources(result)
    
    return data

def generate_html_sections(data, raw_result):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    sections = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –±–æ—Ç–∞
    if raw_result:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è HTML
        formatted_result = raw_result.replace('\n', '<br>')
        sections.append(f"""
            <div class="raw-result" style="background: rgba(255,255,255,0.05); padding: 20px; border-radius: 10px; font-family: 'Courier New', monospace; white-space: pre-wrap; line-height: 1.6; margin-top: 20px;">
                {formatted_result}
            </div>
        """)
    
    return ''.join(sections)

def generate_navigation_sections(data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    navigation_items = []
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if data['phone'] or data['country'] or data['region'] or data['operator']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üì± –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>')
    
    # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if data['databases']:
        for db in data['databases'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            navigation_items.append(f'<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">{db["emoji"]} {db["name"]} [{db["date"]}]</div>')
    
    # –õ–∏—Ü–∞
    if data['persons']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üë≥‚Äç‚ôÇÔ∏è –õ–∏—Ü–∞ ({len(data["persons"])})</div>')
    
    # –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if data['birth_dates']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üéâ –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ({len(data["birth_dates"])})</div>')
    
    # –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
    if data['cars']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üöò –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ ({len(data["cars"])})</div>')
    
    # –ü–æ—á—Ç—ã
    if data['emails']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã ({len(data["emails"])})</div>')
    
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã
    if data['phones']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã ({len(data["phones"])})</div>')
    
    # –ò–ù–ù
    if data['inns']:
        navigation_items.append('<div class="nav-item" style="color: #ffffff; padding: 10px; margin-bottom: 10px; border-radius: 8px; background: rgba(255,255,255,0.1);">üèõÔ∏è –ò–ù–ù ({len(data["inns"])})</div>')
    
    return ''.join(navigation_items)

# --- –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ in-memory —Å–ª–æ–≤–∞—Ä–∏ ---

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def register_user(user_id, username):
    add_user(user_id, username)

# --- –ö–∞–ø—á–∞ ---
def need_captcha(user_id):
    return not has_passed_captcha(user_id)

# --- START ---
user_states = {}
last_search_time = {}
SEARCH_COOLDOWN = 120
pending_invoices = {}

@bot.callback_query_handler(func=lambda call: call.data in ["search_phone", "search_name"])
def handle_search_states(call: CallbackQuery):
    user_id = call.from_user.id
    global last_search_time
    now = time.time()
    if user_id in last_search_time and now - last_search_time[user_id] < SEARCH_COOLDOWN:
        bot.answer_callback_query(call.id, "üñ§ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏.", show_alert=True)
        return
    if call.data == "search_phone":
        user_states[user_id] = {"state": "waiting_for_phone"}
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üì± <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n<code>+7XXXXXXXXXX</code>\n–ü—Ä–∏–º–µ—Ä: <code>+79123456789</code>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )
    elif call.data == "search_name":
        user_states[user_id] = {"state": "waiting_for_name"}
        bot.answer_callback_query(call.id)
        bot.edit_message_text(
            "üë§ <b>–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> –±—É–∫–≤—ã, —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã\n<b>–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> —Ü–∏—Ñ—Ä—ã\n–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</code>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML'
        )

@bot.message_handler(commands=['start'])
def start_command(message: Message, edit=False):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    from db import get_all_users
    already_registered = any(row[0] == user_id for row in get_all_users())
    register_user(user_id, username)
    greetings = [
        "üëã –ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maniac Info!",
        "üí´ –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {username}!",
        "üî• –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {username}! –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?",
        "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {username}!"
    ]
    greet = random.choice(greetings).format(username=f"@{username}" if username else f"ID:{user_id}")
    short_desc = "<b>üíö Maniac Info ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –∏–º–µ–Ω–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –ø–æ–¥–ø–∏—Å–∫–∏, –±–æ–Ω—É—Å—ã!</b>"
    # --- –ö–∞–ø—á–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ---
    if need_captcha(user_id):
        correct_emoji = random.choice(["üçè", "üçé", "üçå", "üçä", "üçã", "üçâ", "üçá", "üçì", "üçí", "ü•ù", "ü•ë", "üçç"])
        wrong_emojis = random.sample([e for e in ["üçè", "üçé", "üçå", "üçä", "üçã", "üçâ", "üçá", "üçì", "üçí", "ü•ù", "ü•ë", "üçç"] if e != correct_emoji], 2)
        bot.send_message(
            message.chat.id,
            f"üñ§ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ <b>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n\n<b>–í—ã–±–µ—Ä–∏: {correct_emoji}</b>",
            parse_mode='HTML',
            reply_markup=create_emoji_captcha_keyboard(correct_emoji, wrong_emojis)
        )
        return
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
    if not check_channel_subscription(user_id):
        channel_keyboard = InlineKeyboardMarkup(row_width=1)
        channel_keyboard.add(
            InlineKeyboardButton("üíö –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK),
            InlineKeyboardButton("üñ§ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
        )
        bot.send_message(
            message.chat.id,
            f"üñ§ ***–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!***\n\n"
            f"*–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>{CHANNEL_NAME}</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:*\n"
            f"<b>{CHANNEL_NAME}</b>\n\n"
            f"*–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'*",
            parse_mode='HTML',
            reply_markup=channel_keyboard
        )
        return
    # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ---
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith('ref'):
            try:
                referrer_id = int(ref_code[3:])
                from db import get_referrals
                if referrer_id == user_id:
                    # –°–∞–º —Å–µ–±–µ ‚Äî —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
                    if user_id not in get_referrals(user_id):
                        add_referral(user_id, user_id)
                        add_free_request(user_id)
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å–∞–º–∏ —Å–µ–±—è. –≠—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
                        print(f"[REFERRAL] user_id={user_id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–∞–º —Å–µ–±—è ‚Äî 1 —Ä–∞–∑, –±–æ–Ω—É—Å –≤—ã–¥–∞–Ω")
                    else:
                        bot.send_message(message.chat.id, "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ —Å–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ–ª—å–∑—è!")
                        print(f"[REFERRAL] user_id={user_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è ‚Äî –æ—Ç–∫–∞–∑–∞–Ω–æ")
                else:
                    # –ù–µ —Å–∞–º —Å–µ–±–µ
                    if user_id not in get_referrals(referrer_id):
                        add_referral(referrer_id, user_id)
                        add_free_request(referrer_id)
                        print(f"[REFERRAL] referrer_id={referrer_id} user_id={user_id} -> –Ω–∞—á–∏—Å–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É")
                        bot.send_message(referrer_id, f"üíö –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! ID: {user_id}\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
                    else:
                        bot.send_message(referrer_id, f"üñ§ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
            except Exception as e:
                print(f"[REFERRAL] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: {e}")
    # --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
    bot.send_message(
        message.chat.id,
        f"{greet}\n\n{short_desc}",
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )

# --- –ö–∞–ø—á–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("captcha_"))
def handle_captcha_emoji(call: CallbackQuery):
    user_id = call.from_user.id
    set_captcha_passed(user_id)
    bot.answer_callback_query(call.id, "üíö –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
    # –¢–µ–ø–µ—Ä—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    start_command(call.message, edit=True)

# --- –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ---
def has_free_request(user_id):
    return get_free_requests(user_id) > 0

# --- –ü–æ–¥–ø–∏—Å–∫–∏ ---
def has_subscription(user_id):
    sub = get_subscription(user_id)
    return sub and sub[0] and sub[1] > time.time()

def has_free_sub(user_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (—á–µ—Ä–µ–∑ –±–∞–∑—É –∏–ª–∏ in-memory)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî in-memory, –Ω–æ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    if not hasattr(has_free_sub, 'used'):
        has_free_sub.used = set()
    return user_id in has_free_sub.used

def set_free_sub_used(user_id):
    if not hasattr(has_free_sub, 'used'):
        has_free_sub.used = set()
    has_free_sub.used.add(user_id)

# --- –ü—Ä–æ—Ñ–∏–ª—å ---
@bot.callback_query_handler(func=lambda call: call.data == "profile")
def handle_profile(call: CallbackQuery):
    user_id = call.from_user.id
    sub = get_subscription(user_id)
    if sub and sub[0] and sub[1] > time.time():
        sub_status = "<b>üíö –ê–∫—Ç–∏–≤–Ω–∞</b>"
        sub_until = time.strftime('%d.%m.%Y', time.localtime(sub[1]))
    else:
        sub_status = "<b>üñ§ –ù–µ—Ç</b>"
        sub_until = "-"
    free = get_free_requests(user_id)
    ref_count = len(get_referrals(user_id))
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<b>ID:</b> <code>{user_id}</code>\n"
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {sub_status}\n"
        f"<b>–î–æ:</b> {sub_until}\n"
        f"<b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b> <b>{free}</b> üíö\n"
        f"<b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <b>{ref_count}</b> üéÅ\n"
    )
    bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=create_back_keyboard(),
        parse_mode='HTML'
    )
    bot.answer_callback_query(call.id)
    return

# --- –†–µ—Ñ–µ—Ä–∞–ª—ã ---
@bot.callback_query_handler(func=lambda call: call.data == "referral")
def handle_referral(call: CallbackQuery):
    user_id = call.from_user.id
    ref_link = get_referral_link(user_id)
    ref_count = len(get_referrals(user_id))
    text = (
        f"üéÅ ***–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:***\n"
        f"`{ref_link}`\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{ref_count}** üíö\n\n"
        f"–ö–∞–∂–¥—ã–π –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –ø–æ–ª—É—á–∞–µ—Ç 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å! üí∞"
    )
    bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=create_back_keyboard(),
        parse_mode='Markdown'
    )
    bot.answer_callback_query(call.id)
    return

# --- –ü–æ–∏—Å–∫ ---
# (–æ—Å—Ç–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞, —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —á–µ—Ä–µ–∑ –±–∞–∑—É)

@bot.message_handler(func=lambda message: not message.text.startswith('/') and message.from_user.id not in admin_states)
def handle_all_messages(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    msg_id = message.message_id
    text = message.text.strip()
    now = time.time()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(chat_id, msg_id)
    except:
        pass
    # –ï—Å–ª–∏ –Ω–µ—Ç bot_msg_id, —Å–æ–∑–¥–∞—ë–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –≤—Å–µ–≥–¥–∞ edit_message_text
    if user_id not in user_states or "bot_msg_id" not in user_states[user_id]:
        bot_msg = bot.send_message(chat_id, "üñ§ –û–∂–∏–¥–∞–Ω–∏–µ...", parse_mode='HTML')
        if user_id not in user_states:
            user_states[user_id] = {}
        user_states[user_id]["bot_msg_id"] = bot_msg.message_id
    bot_msg_id = user_states[user_id]["bot_msg_id"]
    # --- –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É ---
    if user_id in user_states and user_states[user_id].get("state") == "waiting_for_phone":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
        if user_id in last_search_time and now - last_search_time[user_id] < SEARCH_COOLDOWN:
            bot.edit_message_text("üñ§ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏.", chat_id=chat_id, message_id=bot_msg_id)
            del user_states[user_id]
            return
        if not text.startswith('+') or len(text) < 10:
            bot.edit_message_text("üñ§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>+7XXXXXXXXXX</code>", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
            return
        if not has_subscription(user_id):
            if get_free_requests(user_id) <= 0:
                bot.edit_message_text("üñ§ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞!", chat_id=chat_id, message_id=bot_msg_id)
                del user_states[user_id]
                return
            if not use_free_request(user_id):
                bot.edit_message_text("üñ§ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞!", chat_id=chat_id, message_id=bot_msg_id)
                del user_states[user_id]
                return
        last_search_time[user_id] = now
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å–º–µ–Ω—É —Ç–µ–∫—Å—Ç–∞)
        bot.edit_message_text(f"üíö <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É:</b> {text}\n\nüíö –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫...", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
        try:
            result = search_phone_number_sync(text)
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = clean_result_for_telegram(result)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            username = message.from_user.username or "Unknown"
            html_filename = generate_html_report("phone", text, result, user_id, username)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            log_search_for_admins(user_id, username, "phone", text, result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ HTML —Ñ–∞–π–ª
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                result = result[:4000] + "..."
            bot.edit_message_text(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É:\n\n{result}", chat_id=chat_id, message_id=bot_msg_id, reply_markup=create_back_keyboard())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if html_filename and os.path.exists(html_filename):
                try:
                    with open(html_filename, 'rb') as html_file:
                        bot.send_document(chat_id, html_file, caption="üé® –ö—Ä–∞—Å–∏–≤—ã–π HTML –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞")
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(html_filename)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Ñ–∞–π–ª–∞: {e}")
                    
        except Exception as e:
            bot.edit_message_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:</b> {str(e)}", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        del user_states[user_id]
        return
    # --- –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ ---
    if user_id in user_states and user_states[user_id].get("state") == "waiting_for_name":
        if user_id in last_search_time and now - last_search_time[user_id] < SEARCH_COOLDOWN:
            bot.edit_message_text("üñ§ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏.", chat_id=chat_id, message_id=bot_msg_id)
            del user_states[user_id]
            return
        if any(char.isdigit() for char in text):
            bot.edit_message_text("üñ§ –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã.", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
            return
        if len(text) < 2:
            bot.edit_message_text("üñ§ –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞!", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
            return
        if not has_subscription(user_id):
            if get_free_requests(user_id) <= 0:
                bot.edit_message_text("üñ§ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞!", chat_id=chat_id, message_id=bot_msg_id)
                del user_states[user_id]
                return
            if not use_free_request(user_id):
                bot.edit_message_text("üñ§ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞!", chat_id=chat_id, message_id=bot_msg_id)
                del user_states[user_id]
                return
        last_search_time[user_id] = now
        bot.edit_message_text(f"üíö <b>–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:</b> {text}\n\nüíö –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫...", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
        try:
            result = search_by_name_sync(text)
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            result = clean_result_for_telegram(result)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            username = message.from_user.username or "Unknown"
            html_filename = generate_html_report("name", text, result, user_id, username)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            log_search_for_admins(user_id, username, "name", text, result)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ HTML —Ñ–∞–π–ª
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 4000:
                result = result[:4000] + "..."
            bot.edit_message_text(f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏:\n\n{result}", chat_id=chat_id, message_id=bot_msg_id, reply_markup=create_back_keyboard())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if html_filename and os.path.exists(html_filename):
                try:
                    with open(html_filename, 'rb') as html_file:
                        bot.send_document(chat_id, html_file, caption="üé® –ö—Ä–∞—Å–∏–≤—ã–π HTML –æ—Ç—á–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞")
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(html_filename)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML —Ñ–∞–π–ª–∞: {e}")
                    
        except Exception as e:
            bot.edit_message_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:</b> {str(e)}", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        del user_states[user_id]
        return
    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ (–ø—Ä–æ—Ñ–∏–ª—å, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –º–∞–≥–∞–∑–∏–Ω, –æ—à–∏–±–∫–∏ –∏ —Ç.–¥.) ---
    # ... (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ: —Ç–æ–ª—å–∫–æ edit_message_text(chat_id, bot_msg_id))

# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ join request (–¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã) ---
@bot.chat_join_request_handler()
def approve_join_request(join_request: ChatJoinRequest):
    try:
        bot.approve_chat_join_request(join_request.chat.id, join_request.from_user.id)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {join_request.from_user.id} –≤ {join_request.chat.id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∞!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")

def create_about_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–û –±–æ—Ç–µ' —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üñ§ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard

# --- –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
# –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ —Å—Ä–∞–∑—É edit_message_text(bot_msg_id) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º '–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤'.
# –ü—Ä–∏–º–µ—Ä:
def remove_channel_and_update_message(user_id, chat_id):
    channels = get_channels()
    if not channels:
        bot.edit_message_text("üñ§ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML')
    else:
        keyboard = InlineKeyboardMarkup(row_width=1)
        for ch in channels:
            keyboard.add(InlineKeyboardButton(f"{ch[2]} ({ch[0]})", callback_data=f"remove_channel_{ch[0]}"))
        bot.edit_message_text("‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", chat_id=chat_id, message_id=bot_msg_id, parse_mode='HTML', reply_markup=keyboard)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
def create_admin_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("ü¶æ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_add_sub"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_remove_sub"),
    )
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üíö –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π", callback_data="admin_users_active"),
    )
    keyboard.add(
        InlineKeyboardButton("ü§ç –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_all"),
    )
    keyboard.add(
        InlineKeyboardButton("‚ûï –ê–¥–º–∏–Ω", callback_data="admin_add_admin"),
        InlineKeyboardButton("‚ûñ –ê–¥–º–∏–Ω", callback_data="admin_remove_admin"),
    )
    keyboard.add(
        InlineKeyboardButton("‚ûï –ö–∞–Ω–∞–ª", callback_data="admin_add_channel"),
        InlineKeyboardButton("‚ûñ –ö–∞–Ω–∞–ª", callback_data="admin_remove_channel"),
    )
    keyboard.add(
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
    )
    return keyboard

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
admin_states = {}

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_panel(call: CallbackQuery):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    msg_id = call.message.message_id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    action = call.data
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –º–µ–Ω—é
    if action == "admin_back":
        if user_id in admin_states:
            del admin_states[user_id]
        bot.edit_message_text(
            "<b>üñ§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_admin_keyboard()
        )
        return
    # --- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ---
    if action == "admin_add_sub":
        admin_states[user_id] = {"step": "wait_user_id", "mode": "add_sub"}
        bot.edit_message_text(
            "ü¶æ –í–≤–µ–¥–∏—Ç–µ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard()
        )
        return
    # --- –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ---
    if action == "admin_remove_sub":
        admin_states[user_id] = {"step": "wait_user_id", "mode": "remove_sub"}
        bot.edit_message_text(
            "üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard()
        )
        return
    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–≥–ª—É—à–∫–∏) ---
    if action == "admin_stats":
        from db import get_all_users, get_all_subscriptions
        users = get_all_users()
        subs = get_all_subscriptions()  # [(user_id, active, expires_at), ...]
        now = time.time()
        active_subs = sum(1 for sub in subs if sub[1] and sub[2] > now)
        total_subs = len(subs)
        total_users = len(users)
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üíö <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {active_subs}\n"
            f"üñ§ <b>–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫:</b> {total_subs}"
        )
        bot.edit_message_text(stats_text, chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_users_active":
        from db import get_all_users, get_subscription
        users = get_all_users()
        now = time.time()
        active_users = []
        for row in users:
            uid, username = row
            sub = get_subscription(uid)
            if sub and sub[0] and sub[1] > now:
                expires_date = time.strftime("%d.%m.%Y", time.localtime(sub[1]))
                active_users.append(f"üíö <b>ID:</b> {uid}\nüë§ @{username}\nüí∞ <b>–î–æ:</b> {expires_date}")
        if not active_users:
            users_text = "üíö <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π</b>"
        else:
            users_text = "üíö <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π:</b>\n\n" + "\n\n".join(active_users)
        bot.edit_message_text(users_text, chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_users_all":
        from db import get_all_users, get_subscription
        users = get_all_users()
        now = time.time()
        all_users = []
        for row in users:
            uid, username = row
            sub = get_subscription(uid)
            if sub and sub[0] and sub[1] > now:
                expires_date = time.strftime("%d.%m.%Y", time.localtime(sub[1]))
                all_users.append(f"üíö <b>ID:</b> {uid}\nüë§ @{username}\nüí∞ <b>–î–æ:</b> {expires_date}")
            elif sub and not sub[0]:
                all_users.append(f"üíõ <b>ID:</b> {uid}\nüë§ @{username} (–∏—Å—Ç–µ–∫–ª–∞)")
            else:
                all_users.append(f"ü§ç <b>ID:</b> {uid}\nüë§ @{username} (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)")
        if not all_users:
            users_text = "ü§ç <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"
        else:
            users_text = "ü§ç <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n" + "\n\n".join(all_users)
        bot.edit_message_text(users_text, chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_add_admin":
        admin_states[user_id] = {"step": "wait_admin_id", "mode": "add_admin"}
        bot.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞</b>:", chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_remove_admin":
        admin_states[user_id] = {"step": "wait_admin_id", "mode": "remove_admin"}
        bot.edit_message_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ <b>ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>:", chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_add_channel":
        admin_states[user_id] = {"step": "wait_channel_id", "mode": "add_channel"}
        bot.edit_message_text("‚ûï –í–≤–µ–¥–∏—Ç–µ <b>ID –∫–∞–Ω–∞–ª–∞</b>:", chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_remove_channel":
        admin_states[user_id] = {"step": "wait_channel_id", "mode": "remove_channel"}
        bot.edit_message_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ <b>ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>:", chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return
    if action == "admin_broadcast":
        admin_states[user_id] = {"step": "wait_broadcast_text", "mode": "broadcast"}
        bot.edit_message_text("üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", chat_id=chat_id, message_id=msg_id, parse_mode='HTML', reply_markup=create_back_keyboard())
        return

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–∞–∑–∞–¥" ---
def create_back_keyboard(admin=False):
    kb = InlineKeyboardMarkup()
    if admin:
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back"))
    else:
        kb.add(InlineKeyboardButton("üñ§ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return kb

@bot.message_handler(commands=['admin'])
def admin_command(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return
    admin_text = (
        "<b>üñ§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ ü¶æ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ üíö –¢–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "‚Ä¢ ü§ç –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        "‚Ä¢ ‚ûï –ê–¥–º–∏–Ω\n"
        "‚Ä¢ ‚ûñ –ê–¥–º–∏–Ω\n"
        "‚Ä¢ ‚ûï –ö–∞–Ω–∞–ª\n"
        "‚Ä¢ ‚ûñ –ö–∞–Ω–∞–ª\n"
        "‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞\n"
    )
    bot.send_message(message.chat.id, admin_text, parse_mode='HTML', reply_markup=create_admin_keyboard())

@bot.message_handler(func=lambda message: message.from_user.id in admin_states)
def handle_admin_steps(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    msg_id = message.message_id
    state = admin_states.get(user_id, {})
    step = state.get("step")
    mode = state.get("mode")
    text = message.text.strip()
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        del admin_states[user_id]
        bot.send_message(chat_id, "<b>üñ§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode='HTML', reply_markup=create_admin_keyboard())
        return
    # --- –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ---
    if mode == "add_sub":
        if step == "wait_user_id":
            if not text.isdigit():
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)", reply_markup=create_back_keyboard())
                return
            state["target_user_id"] = int(text)
            state["step"] = "wait_days"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 30, 365, 9999 –¥–ª—è –Ω–∞–≤—Å–µ–≥–¥–∞):", reply_markup=create_back_keyboard())
            return
        if step == "wait_days":
            if not text.isdigit() or int(text) <= 0:
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫ (—á–∏—Å–ª–æ –¥–Ω–µ–π)", reply_markup=create_back_keyboard())
                return
            days = int(text)
            target_user_id = state["target_user_id"]
            from db import add_subscription
            import time
            expires_at = time.time() + days*24*60*60 if days < 9999 else time.time() + 10*365*24*60*60
            add_subscription(target_user_id, expires_at, user_id)
            bot.send_message(chat_id, f"üíö –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{target_user_id}</code> –Ω–∞ {days if days < 9999 else '–Ω–∞–≤—Å–µ–≥–¥–∞'} –¥–Ω–µ–π!", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ---
    if mode == "remove_sub":
        if step == "wait_user_id":
            if not text.isdigit():
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)", reply_markup=create_back_keyboard())
                return
            target_user_id = int(text)
            from db import get_subscription, add_subscription
            sub = get_subscription(target_user_id)
            if not sub or not sub[0]:
                bot.send_message(chat_id, f"üñ§ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_user_id}</code> –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!", parse_mode='HTML', reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            # –î–µ–ª–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∏ expires_at=0
            add_subscription(target_user_id, 0, user_id)
            bot.send_message(chat_id, f"üóëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_user_id}</code>!", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ---
    if mode == "add_admin":
        if step == "wait_admin_id":
            if not text.isdigit():
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)", reply_markup=create_back_keyboard())
                return
            target_admin_id = int(text)
            if target_admin_id in ADMIN_IDS:
                bot.send_message(chat_id, f"üñ§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_admin_id}</code> —É–∂–µ –∞–¥–º–∏–Ω!", parse_mode='HTML', reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            ADMIN_IDS.append(target_admin_id)
            bot.send_message(chat_id, f"üíö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_admin_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ---
    if mode == "remove_admin":
        if step == "wait_admin_id":
            if not text.isdigit():
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)", reply_markup=create_back_keyboard())
                return
            target_admin_id = int(text)
            if target_admin_id == user_id:
                bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            if target_admin_id not in ADMIN_IDS:
                bot.send_message(chat_id, f"üñ§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_admin_id}</code> –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!", parse_mode='HTML', reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            ADMIN_IDS.remove(target_admin_id)
            bot.send_message(chat_id, f"üñ§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_admin_id}</code> —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤!", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª ---
    if mode == "add_channel":
        if step == "wait_channel_id":
            if not (text.startswith('-') and text[1:].isdigit()):
                bot.send_message(chat_id, "‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!", reply_markup=create_back_keyboard())
                return
            state["channel_id"] = int(text)
            state["step"] = "wait_channel_link"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (https://...):", reply_markup=create_back_keyboard())
            return
        if step == "wait_channel_link":
            if not (text.startswith("http://") or text.startswith("https://")):
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!", reply_markup=create_back_keyboard())
                return
            state["channel_link"] = text
            state["step"] = "wait_channel_name"
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:", reply_markup=create_back_keyboard())
            return
        if step == "wait_channel_name":
            channel_id = state["channel_id"]
            channel_link = state["channel_link"]
            channel_name = text
            from db import get_channels, add_channel
            channels = get_channels()
            if any(str(c[0]) == str(channel_id) for c in channels):
                bot.send_message(chat_id, "üñ§ –¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            add_channel(channel_id, channel_link, channel_name)
            reset_all_captcha()
            bot.send_message(chat_id, f"üíö –ö–∞–Ω–∞–ª <b>{channel_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω! ID: <code>{channel_id}</code>", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ---
    if mode == "remove_channel":
        if step == "wait_channel_id":
            if not (text.startswith('-') and text[1:].isdigit()):
                bot.send_message(chat_id, "‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å - –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!", reply_markup=create_back_keyboard())
                return
            channel_id = int(text)
            from db import get_channels, remove_channel
            channels = get_channels()
            if not any(str(c[0]) == str(channel_id) for c in channels):
                bot.send_message(chat_id, "üñ§ –¢–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç!", reply_markup=create_back_keyboard())
                del admin_states[user_id]
                return
            remove_channel(channel_id)
            bot.send_message(chat_id, f"üñ§ –ö–∞–Ω–∞–ª —Å ID <code>{channel_id}</code> —É–¥–∞–ª—ë–Ω!", parse_mode='HTML', reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return
    # --- –†–∞—Å—Å—ã–ª–∫–∞ ---
    if mode == "broadcast":
        if step == "wait_broadcast_text":
            from db import get_all_users
            users = get_all_users()
            text_to_send = text
            success = 0
            fail = 0
            for row in users:
                uid = row[0]
                try:
                    bot.send_message(uid, text_to_send)
                    success += 1
                except Exception:
                    fail += 1
            bot.send_message(chat_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {fail}", reply_markup=create_back_keyboard())
            del admin_states[user_id]
            return

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
ADMIN_IDS = [7438900969, 821204149, 415990673]  # –ü—Ä–∏–º–µ—Ä: —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ Telegram user_id

def is_admin(user_id):
    return user_id in ADMIN_IDS

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back_to_main(call: CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or ""
    greetings = [
        "üëã –ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maniac Info!",
        "üí´ –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {username}!",
        "üî• –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {username}! –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?",
        "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {username}!"
    ]
    greet = random.choice(greetings).format(username=f"@{username}" if username else f"ID:{user_id}")
    short_desc = "<b>üíö Maniac Info ‚Äî –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –∏–º–µ–Ω–∏, —Ä–µ—Ñ–µ—Ä–∞–ª—ã, –ø–æ–¥–ø–∏—Å–∫–∏, –±–æ–Ω—É—Å—ã!</b>"
    bot.edit_message_text(
        f"{greet}\n\n{short_desc}",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=create_main_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "about")
def handle_about(call: CallbackQuery):
    about_text = (
        "<b>üíö Maniac Info ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n\n"
        "üñ§ <b>–ú–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram</b>\n\n"
        "<b>üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –Ω–æ–º–µ—Ä–∞\n"
        "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã, —Å–æ—Ü—Å–µ—Ç–∏, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: <code>+7XXXXXXXXXX</code>\n\n"
        "<b>üë§ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:</b>\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏\n"
        "‚Ä¢ –ù–∞–π–¥–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –ø—Ä–æ—Ñ–∏–ª–∏\n"
        "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞\n\n"
        "<b>üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</b>\n"
        "‚Ä¢ üíö –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
        "‚Ä¢ üñ§ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üí∞ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n"
        "‚Ä¢ üí∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ üíö –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –±–æ–Ω—É—Å–∞–º–∏\n"
        "‚Ä¢ üñ§ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "<b>üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª—è–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "<b>üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> <code>–ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–æ–±–∏–≤, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É, –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–Ω—Ç–∞–∫—Ç—ã, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</code>\n\n"
        "<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'</i>"
    )
    bot.edit_message_text(
        about_text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=create_back_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "start_search")
def handle_start_search(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        "üíö <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:</b>",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=create_search_method_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "shop")
def handle_shop(call: CallbackQuery):
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        "üõí <b>–ú–∞–≥–∞–∑–∏–Ω –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=create_shop_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy_tariff(call: CallbackQuery):
    user_id = call.from_user.id
    tariff = call.data.split("_", 1)[1]  # '7', '14', '30', '365', 'infinity'
    price = PRICES.get(tariff)
    if not price:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ!", show_alert=True) 
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ CryptoPay
    try:
        invoice = crypto.create_invoice(
            asset="USDT",  # –∏–ª–∏ –¥—Ä—É–≥–æ–π asset, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            amount=price,
            description=f"–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Maniac Info –Ω–∞ {tariff} –¥–Ω–µ–π"
        )
        invoice_id = invoice["invoice_id"]
        pending_invoices[user_id] = {"invoice_id": invoice_id, "tariff": tariff}
        pay_url = invoice["pay_url"]
        check_keyboard = InlineKeyboardMarkup()
        check_keyboard.add(
            InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url),
            InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")
        )

        bot.edit_message_text(
            f"üí∏ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{tariff} –¥–Ω–µ–π</b>\n"
            f"–°—É–º–º–∞: <b>{price}$</b>\n",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML',
            reply_markup=check_keyboard
        )
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞: {e}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "check_payment")
def handle_check_payment(call: CallbackQuery):
    user_id = call.from_user.id
    invoice_info = pending_invoices.get(user_id)
    if not invoice_info:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç!", show_alert=True)
        print(f"[LOG] –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç –¥–ª—è user_id={user_id}")
        return

    invoice_id = invoice_info["invoice_id"]
    tariff = invoice_info["tariff"]
    print(f"[LOG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã: user_id={user_id}, invoice_id={invoice_id}, tariff={tariff}")

    try:
        old_invoice = crypto.get_invoices(invoice_ids=invoice_id)
        print(f"[LOG] –û—Ç–≤–µ—Ç get_invoices: {old_invoice}")
        if old_invoice and "items" in old_invoice and old_invoice["items"]:
            status = old_invoice["items"][0]["status"]
            print(f"[LOG] –°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞: {status}")
            if status == "paid":
                days = 9999 if tariff == "infinity" else int(tariff)
                expires_at = time.time() + days * 24 * 60 * 60
                add_subscription(user_id, expires_at, user_id)
                bot.edit_message_text(
                    "üíö –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=create_back_keyboard()
                )
                del pending_invoices[user_id]
                print(f"[LOG] –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ user_id={user_id} –Ω–∞ {days} –¥–Ω–µ–π")
            else:
                bot.answer_callback_query(call.id, "üñ§ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
                print(f"[LOG] –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è invoice_id={invoice_id}, user_id={user_id}, —Å—Ç–∞—Ç—É—Å={status}")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ!", show_alert=True)
            print(f"[LOG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è invoice_id={invoice_id}, user_id={user_id}")
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", show_alert=True)
        print(f"[LOG] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "free_sub")
def handle_free_sub(call: CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or ""
    text = (
        "üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b>7 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–æ–±–∞–≤—å <b>@ManiacInfoBot</b> –≤ —Å–≤–æ–π –Ω–∏–∫ Telegram.\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
        "<i>–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑!</i>"
    )
    check_kb = InlineKeyboardMarkup()
    check_kb.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫", callback_data="check_free_sub"))
    check_kb.add(InlineKeyboardButton("üñ§ –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode='HTML',
        reply_markup=check_kb
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_free_sub")
def handle_check_free_sub(call: CallbackQuery):
    user_id = call.from_user.id
    first_name = call.from_user.first_name or ""
    last_name = call.from_user.last_name or ""
    full_name = f"{first_name} {last_name}".lower()
    print(f"[LOG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: user_id={user_id}, full_name={full_name}")
    if has_free_sub(user_id):
        bot.answer_callback_query(call.id, "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    if "maniacinfobot" in full_name:
        # –í—ã–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π
        expires_at = time.time() + 7 * 24 * 60 * 60
        add_subscription(user_id, expires_at, user_id)
        set_free_sub_used(user_id)
        bot.edit_message_text(
            "üíö –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML',
            reply_markup=create_back_keyboard()
        )
        print(f"[LOG] –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞ user_id={user_id}")
    else:
        bot.answer_callback_query(call.id, "‚ùå –í –≤–∞—à–µ–º –Ω–∏–∫–µ –Ω–µ—Ç @ManiacInfoBot!", show_alert=True)

def log_search_for_admins(user_id, username, search_type, query, result):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ –æ –ø–æ–∏—Å–∫–∞—Ö –∞–¥–º–∏–Ω–∞–º"""
    try:
        # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
        admin_ids = [7438900969]  # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        log_message = f"""
üîç –õ–û–ì –ü–û–ò–°–ö–ê

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})
üîé –¢–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}
üì± –ó–∞–ø—Ä–æ—Å: {query}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in admin_ids:
            try:
                bot.send_message(admin_id, log_message)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def detect_database_sources(result):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞"""
    databases = []
    
    import re
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: —ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ + [–¥–∞—Ç–∞]:
    pattern = r'([üì±üè•üìöüá∑üá∫üìóüéΩüèõüìßüöòüéâüë≥‚Äçüì±üì°üåçüìçüìÑüìÖüìäüìàüìâüìãüìåüìéüìèüìêüìëüìíüììüìîüìïüìñüìóüìòüìôüìöüìõüìúüìùüìûüìüüì†üì°üì¢üì£üì§üì•üì¶üìßüì®üì©üì™üì´üì¨üì≠üìÆüìØüì∞üì±üì≤üì≥üì¥üìµüì∂üì∑üì∏üìπüì∫üìªüìºüìΩüìæüìøüîÄüîÅüîÇüîÉüîÑüîÖüîÜüîáüîàüîâüîäüîãüîåüîçüîéüîèüîêüîëüîíüîìüîîüîïüîñüîóüîòüîôüîöüîõüîúüîùüîûüîüüî†üî°üî¢üî£üî§üî•üî¶üîßüî®üî©üî™üî´üî¨üî≠üîÆüîØüî∞üî±üî≤üî≥üî¥üîµüî∂üî∑üî∏üîπüî∫üîªüîºüîΩüîæüîøüïÄüïÅüïÇüïÉüïÑüïÖüïÜüïáüïàüïâüïäüïãüïåüïçüïéüïèüïêüïëüïíüïìüïîüïïüïñüïóüïòüïôüïöüïõüïúüïùüïûüïüüï†üï°üï¢üï£üï§üï•üï¶üïßüï®üï©üï™üï´üï¨üï≠üïÆüïØüï∞üï±üï≤üï≥üï¥üïµüï∂üï∑üï∏üïπüï∫üïªüïºüïΩüïæüïøüñÄüñÅüñÇüñÉüñÑüñÖüñÜüñáüñàüñâüñäüñãüñåüñçüñéüñèüñêüñëüñíüñìüñîüñïüññüñóüñòüñôüñöüñõüñúüñùüñûüñüüñ†üñ°üñ¢üñ£üñ§üñ•üñ¶üñßüñ®üñ©üñ™üñ´üñ¨üñ≠üñÆüñØüñ∞üñ±üñ≤üñ≥üñ¥üñµüñ∂üñ∑üñ∏üñπüñ∫üñªüñºüñΩüñæüñøüóÄüóÅüóÇüóÉüóÑüóÖüóÜüóáüóàüóâüóäüóãüóåüóçüóéüóèüóêüóëüóíüóìüóîüóïüóñüóóüóòüóôüóöüóõüóúüóùüóûüóüüó†üó°üó¢üó£üó§üó•üó¶üóßüó®üó©üó™üó´üó¨üó≠üóÆüóØüó∞üó±üó≤üó≥üó¥üóµüó∂üó∑üó∏üóπüó∫üóªüóºüóΩüóæüóø])\s+([^[]+)\s*\[([^\]]+)\]:'
    
    matches = re.findall(pattern, result)
    for match in matches:
        emoji, db_name, date = match
        databases.append({
            'emoji': emoji,
            'name': db_name.strip(),
            'date': date.strip(),
            'full_match': f'{emoji} {db_name.strip()} [{date.strip()}]:'
        })
    
    return databases

def clean_result_for_telegram(result):
    """–û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    if isinstance(result, str):
        if "—Ä–æ—é—Å—å –≤ –¥–∞–Ω–Ω—ã—Ö" in result.lower():
            return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            # –£–±–∏—Ä–∞–µ–º ** –∏ –æ—á–∏—â–∞–µ–º –æ—Ç HTML —Ç–µ–≥–æ–≤
            result = result.replace("**", "")
            result = re.sub(r'<[^>]+>', '', result)
            # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ `
            result = result.replace('`', '')
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Å–∏–º–≤–æ–ª—ã
            result = result.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            return result
    return result

def process_bot_file(file_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç –±–æ—Ç–∞, –∏–∑–≤–ª–µ–∫–∞—è —Ç–µ–∫—Å—Ç"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            file_content = f.read()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import os
        os.remove(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ HTML –ª–∏ —ç—Ç–æ —Ñ–∞–π–ª
        if file_content.strip().startswith('<!DOCTYPE html>') or file_content.strip().startswith('<html'):
            print("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω HTML —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...")
            # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
            clean_content = re.sub(r'<[^>]+>', '', file_content)
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            clean_content = re.sub(r'\s+', ' ', clean_content).strip()
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            if len(clean_content) > 4000:
                clean_content = clean_content[:4000] + "..."
            print(f"üìÑ –û—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {clean_content[:200]}...")
            return clean_content
        else:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if len(file_content) > 4000:
                file_content = file_content[:4000] + "..."
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {file_content[:200]}...")
            return file_content
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"

def send_error_message(chat_id, message_id, error_text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑ HTML"""
    try:
        bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {error_text}", chat_id=chat_id, message_id=message_id, reply_markup=create_back_keyboard())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

if __name__ == "__main__":
    print("üíö –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("üñ§ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
    if init_telethon_client():
        print("üíö –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.polling(none_stop=True)
    else:
        print("üñ§ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telethon –∫–ª–∏–µ–Ω—Ç!")
        print("üíö –ü—Ä–æ–≤–µ—Ä—å—Ç–µ session_string.txt –∏ API credentials")
